module entitymodel

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/EntityModel
  lib/editor-common.generated
  check
  generate
  refactor

rules // Main editor interface (defined by editor/EntityModel-Builders and -References.esv)
  
  // Analyzes the current program, returning a tuple with errors, warnings, and notes;
  // each a list of (term, message) tuples or simply (message) terms.
  editor-analyze:
    (ast, path, project-path) -> (ast, errors, warnings, notes)
    with
      editor-init;
      analyze;
      errors   := <collect-all(constraint-error, conc)> ast;
      warnings := <collect-all(constraint-warning, conc)> ast;
      notes    := <collect-all(constraint-note, conc)> ast
  
  // Transforms a selection to django models
  generate-django-models:
    (selected, position, ast, path, project-path) -> (models_file, result)
    with
      models_file := <concat-strings> [<dirname> path, "/models.py"];
      result   := <to-django-model> selected

  // Transforms a selection to django model amdin
  generate-django-admin:
    (selected, position, ast, path, project-path) -> (amdin_file, result)
    with
      amdin_file := <concat-strings> [<dirname> path, "/admin.py"];
      result   := <to-django-admin> selected

  generate-django-app:
    (selected, position, ast, path, project-path) -> None()
   with      
      module_name := <get-module-name> selected;
      models := <to-django-model> selected;
      models_file := $[[<project-path>][module_name]/models_generated.py];
      <debug> $[Writing [models_file]];
      mf_handle := <fopen> (models_file, "w");
      <fclose> <fputs> (models, mf_handle);
      amdin_file := $[[<project-path>][module_name]/admin_generated.py];
      <debug> $[Writing [amdin_file]];
      af_handle := <fopen> (amdin_file, "w");
      <fclose> <fputs> (<to-django-admin> selected, af_handle)
      
 
  // Prints the abstract syntax ATerm of a selection.
  generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := selected // we just return the input term
  
  // Resolves a reference when the user control-clicks or presses F3 in the editor.
  // Only succeeds for nodes of the form Type(_) for which GetEntity is defined.
  editor-resolve:
    (node, position, ast, path, project-path) -> target
    where
      <debug(!"Resolve: ")> node; 
      Type(type) := node; 
      target     := <GetEntity> type

  // Returns "hover help" information for a particular node in the editor.
  // For references, this rule is invoked using the resolved term.
  editor-hover:
    (target, position, ast, path, project-path) -> $[Hover help: [<write-to-string> target]]

  // Completes an identifier when the user presses control-space
  // (the completion identifier in the AST provides additional context information)
  editor-complete:
    (EntityAssoc(COMPLETION(prefix)), position, ast, path, project-path) ->
    [|proposals]
    where
        proposals := <all-keys-GetEntity>

  editor-complete:
    (Type(COMPLETION(prefix)), position, ast, path, project-path) -> ["String", "Int", "Email", "URL", "Date"]
 