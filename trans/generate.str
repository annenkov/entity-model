module generate

imports
  settings
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/EntityModel
  lib/editor-common.generated
  utils

rules
  project-name: _ -> "crm_generated"

  to-django-model:
      Module(x, d*) ->
      $[ # -*- coding: utf-8 -*-
         __all__ = ([all*],)
         
         from django.db import models

         [d'*]
       ]
      with
         d'* := <to-django-model> d*;
         all* :=  <string-join(|", ")> <map(\Entity(x, _, _) -> $['[x]'] \)> d*

  to-django-model:
	Entity(x, p*, r) ->
    $[ class [x](models.Model):
           [p'*]          
           def __unicode__(self):
               return "[x]: {0}".format([to-string])


     ]
	with
	      p'* := <to-django-model> p*;
          to-string := <to-string-repr> r
  
  to-django-model:
    Property(x, t) ->
	$[    [x] = [field_type]         
     ]
     with 
         field_type := <to-django-model> t 
  
  to-string-repr:
    None() -> 
    $[self.pk]
   
  to-string-repr:
    Some(Repr(name)) -> 
    $[self.[name]]

  to-django-model:
    Type("String") -> $[models.CharField(max_length=256)]

  to-django-model:
    Type("String", len) -> $[models.CharField(max_length=[len])]
  
  to-django-model:
    Type("Int")    -> $[models.IntegerField()]
   
  to-django-model:
    Type("Date")    -> $[models.DateField()]
    
  to-django-model:
    Type("URL")    -> $[models.URLField()]
    
  to-django-model:
    Type("Email")    -> $[models.EmailField()]

  to-django-model:
    EntityAssoc(e)    -> $[models.ForeignKey([e])]

  to-django-admin:
      Module(x, d*) ->
      $[ # -*- coding: utf-8 -*-
         __all__ = ([all*],)

         from django.contrib import admin
         from [<project-name>].[x] import models

         [d'*]

         [r'*]
       ]
      with
         d'* := <to-django-admin> d*;
         r'* := <to-django-admin-register> d*;
         all* :=  <string-join(|", ")> <map(\Entity(x, _, _) -> $['[x]Admin'] \)> d*

  to-django-admin:
	Entity(x, p, _) ->
    $[ class [x]Admin(admin.ModelAdmin):
           [<to-list-display> p]

       
     ]

  to-django-admin-register:
	Entity(x, p*, _) ->
    $[ admin.site.register(models.[x], [x]Admin)
     ]

  get-module-name:
      Module(x, d*) -> $[[x]]

  to-list-display:
      p ->
      $[ list_display = ([fields-list],)]
      with
          fields-list := <string-join(|", ")> <map(get-property-name)> p
  
  get-property-name:
    Property(x, _) -> $['[x]']

  to-django-model:
    t* -> <map(to-django-model)> t* 

  to-django-admin:
    t* -> <map(to-django-admin)> t*

  to-django-admin-register:
    t* -> <map(to-django-admin-register)> t*
